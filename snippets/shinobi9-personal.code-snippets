{
    "My StatusManager Script Examples": {
        "prefix": "/msse",
        "description": "纯js实现的状态管理器例子",
        "scope": "javascript",
        "body": [
            "/**",
            " * @version 0.0.1",
            " * @description 纯js状态管理 一个示例",
            " * @author shinobi9",
            " */",
            "class StatusManager {",
            "  constructor(statusList) {",
            "    this.status = -1;",
            "    this.statusList = statusList;",
            "  }",
            "  setStep(step) {",
            "    this.status = this.statusList.indexOf(step) - 1;",
            "  }",
            "  update(mode, type) {",
            "    // 结束按钮 直接退出",
            "    if (mode === -1) {",
            "      this.status = -1",
            "      return",
            "    }",
            "    if (type > 0) {",
            "      // 非可回退的对话类型（aaccept or decline，yes or no）, 不接受即退出 ",
            "      if(mode === 0){",
            "        this.status = -1",
            "        return",
            "      }",
            "      // 正常往下走步骤",
            "      this.status++",
            "      return",
            "    }",
            "    // 普通对话，向前向后",
            "    mode === 1 ? this.status++ : this.status--;",
            "  }",
            "  when(step, callback) {",
            "    const currentStep = this.statusList.indexOf(step);",
            "    if (currentStep === -1) cm.dispose();",
            "    if (this.status === currentStep) callback();",
            "  }",
            "  yes(mode) {",
            "    return mode === 1",
            "  }",
            "}",
            "",
            "let count = 0;",
            "let text = \"\";",
            "let singlePrice = 0;",
            "",
            "const map = new Map([",
            "  [\"苹果\", 6],",
            "  [\"橘子\", 5],",
            "]);",
            "// 定义步骤 ， 默认左往右执行",
            "const sm = new StatusManager([\"buy_what\", \"number\", \"confirm\", \"show\", \"end\"]);",
            "",
            "function start() {",
            "  action(1, 0, 0);",
            "}",
            "",
            "function action(mode, type, selection) {",
            "  sm.update(mode, type);",
            "",
            "  sm.when(\"buy_what\", () => {",
            "    let menu = \"您要买什么?\\r\\n\";",
            "    menu += \"======================\\r\\n\";",
            "    map.forEach((price, item) => (menu += `\\${item} : \\${price} 元\\r\\n`));",
            "    menu += \"======================\\r\\n\";",
            "    cm.sendGetText(menu);",
            "  });",
            "",
            "  sm.when(\"number\", () => {",
            "    text = cm.getText();",
            "    if (!map.has(text)) {",
            "      cm.sendOk(`我们不卖 [ \\${text} ]`);",
            "      sm.setStep(\"buy_what\");",
            "      return;",
            "    }",
            "    singlePrice = map.get(text);",
            "    cm.sendGetNumber(`\\${text} 一个 \\${singlePrice} 元 ,要买几个?(一次最多买50个)`, 1, 1, 50);",
            "  });",
            "",
            "  sm.when(\"confirm\", () => {",
            "    count = selection;",
            "    cm.sendYesNo(\"确认?\");",
            "  });",
            "",
            "  sm.when(\"show\", () => {",
            "    const all = count * singlePrice;",
            "    ",
            "    const options = {",
            "      year: 'numeric',",
            "      month: '2-digit',",
            "      day: '2-digit',",
            "      hour: '2-digit',",
            "      minute: '2-digit',",
            "      second: '2-digit',",
            "      hour12: false, // 使用24小时制",
            "      timeZone: 'Asia/Shanghai' // 设置时区",
            "    };",
            "",
            "    cm.sendOk(`一共是 \\${all} 元`);",
            "    cm.playerMessage(6, `[\\${cm.getPlayer().getName()}] 于 \\${new Date().toLocaleString('zh-CN', options)} 买了 \\${count} 个 \\${text} ,  合计 \\${all} 元！`);",
            "  });",
            "",
            "  sm.when(\"end\", () => {",
            "    cm.dispose();",
            "  });",
            "}"
        ],
    },
    "My StatusManager Script": {
        "prefix": "/mss",
        "description": "纯js实现的状态管理器",
        "scope": "javascript",
        "body": [
            "/**",
            " * @version 0.0.1",
            " * @description 纯js状态管理 一个示例",
            " * @author shinobi9",
            " */",
            "class StatusManager {",
            "  constructor(statusList) {",
            "    this.status = -1;",
            "    this.statusList = statusList;",
            "  }",
            "  setStep(step) {",
            "    this.status = this.statusList.indexOf(step) - 1;",
            "  }",
            "  update(mode, type) {",
            "    // 结束按钮 直接退出",
            "    if (mode === -1) {",
            "      this.status = -1",
            "      return",
            "    }",
            "    if (type > 0) {",
            "      // 非可回退的对话类型（aaccept or decline，yes or no）, 不接受即退出 ",
            "      if(mode === 0){",
            "        this.status = -1",
            "        return",
            "      }",
            "      // 正常往下走步骤",
            "      this.status++",
            "      return",
            "    }",
            "    // 普通对话，向前向后",
            "    mode === 1 ? this.status++ : this.status--;",
            "  }",
            "  when(step, callback) {",
            "    const currentStep = this.statusList.indexOf(step);",
            "    if (currentStep === -1) cm.dispose();",
            "    if (this.status === currentStep) callback();",
            "  }",
            "  yes(mode) {",
            "    return mode === 1",
            "  }",
            "}",
            "",
            "const sm = new StatusManager([\"$1\", \"$2\"]);",
            "",
            "function start() {",
            "  action(1, 0, 0);",
            "}",
            "",
            "function action(mode, type, selection) {",
            "  sm.update(mode, type);",
            "",
            "  sm.when(\"$1\", () => {",
            "     $0 ",
            "  });",
            "",
            "  sm.when(\"$2\", () => {",
            "  ",
            "  });",
            "}",
            ""
        ],
    },
    "My StatusManager Script Compressed": {
        "prefix": "/mssc",
        "body": [
            "class StatusManager{constructor(a){this.status=-1,this.statusList=a}setStep(a){this.status=this.statusList.indexOf(a)-1}update(a,b){return-1===a?void(this.status=-1):0<b?0===a?void(this.status=-1):void this.status++:void(1===a?this.status++:this.status--)}when(a,b){const c=this.statusList.indexOf(a);-1===c&&cm.dispose(),this.status===c&&b()}yes(a){return 1===a}}",
            "",
            "const sm = new StatusManager([\"$1\", \"$2\"]);",
            "",
            "function start() {",
            "  action(1, 0, 0);",
            "}",
            "",
            "function action(mode, type, selection) {",
            "  sm.update(mode, type);",
            "",
            "  sm.when(\"$1\", () => {",
            "     $0 ",
            "  });",
            "",
            "  sm.when(\"$2\", () => {",
            "  ",
            "  });",
            "}",
            ""
        ],
        "description": "纯js实现的状态管理器+压缩"
    }
}